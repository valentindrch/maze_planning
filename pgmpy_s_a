from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination



# Define the Bayesian network structure
model = BayesianNetwork([
    ('a0', 's1'),
    ('s1', 'a1'),
    ('s1', 's2'),
    ('a1', 's2'),
    ('s2', 'a2'),
    ('s2', 's3'),
    ('a2', 's3'),
    ('s3', 'o3')
])

# Define CPDs (Conditional Probability Distributions)

# P(a0)
cpd_a0 = TabularCPD(
    variable='a0',
    variable_card=2,
    values=[[0.7], 
            [0.3]] 
)

# P(s1 | a0)
cpd_s1_given_a0 = TabularCPD(
    variable='s1',
    variable_card=2,
    evidence=['a0'],
    evidence_card=[2],
    values=[
        [0.99, 0.01],  
        [0.01, 0.99]   
    ]
)

# P(a1 | s1)
cpd_a1_given_s1 = TabularCPD(
    variable='a1',
    variable_card=2,
    evidence=['s1'],
    evidence_card=[2],
    values=[
        [0.4, 0.5],  
        [0.6, 0.5]   
    ]
)

# P(s2 | s1, a1)
cpd_s2_given_s1_a1 = TabularCPD(
    variable='s2',
    variable_card=4,
    evidence=['s1', 'a1'],
    evidence_card=[2, 2],
    values=[
        [0.99, 0.01, 0.0, 0.0],  
        [0.01, 0.99, 0.0, 0.0],  
        [0.0, 0.0, 0.99, 0.01],  
        [0.0, 0.0, 0.01, 0.99]   
    ]
)

# P(a2 | s2)
cpd_a2_given_s2 = TabularCPD(
    variable='a2',
    variable_card=2,
    evidence=['s2'],
    evidence_card=[4],
    values=[
        [0.5, 0.3, 0.5, 0.5], #
        [0.5, 0.7, 0.5, 0.5]   
    ]

)

# P(s3 | s2, a2) with 8 states in s3
cpd_s3_given_s2_a2 = TabularCPD(
    variable='s3',
    variable_card=8,
    evidence=['s2', 'a2'],
    evidence_card=[4, 2],
    values=[
        [0.99, 0.01, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  
        [0.01, 0.99, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  
        [0.0, 0.0, 0.99, 0.01, 0.0, 0.0, 0.0, 0.0],  
        [0.0, 0.0, 0.01, 0.99, 0.0, 0.0, 0.0, 0.0],  
        [0.0, 0.0, 0.0, 0.0, 0.99, 0.01, 0.0, 0.0],  
        [0.0, 0.0, 0.0, 0.0, 0.01, 0.99, 0.0, 0.0],  
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99, 0.01],  
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.99]   
    ]
)

# P(o3 | s3)
cpd_o3_given_s3 = TabularCPD(
    variable='o3',
    variable_card=2,
    evidence=['s3'],
    evidence_card=[8],
    values = [[1.38567717e-03, 1.72536861e-04, 1.11286436e-02, 7.17798546e-01, 8.93763065e-02, 8.93763065e-02, 1.38567717e-03, 8.93763065e-02],
              [9.98614323e-01, 9.99827463e-01, 9.88871356e-01, 2.82201454e-01, 9.10623694e-01, 9.10623694e-01, 9.98614323e-01, 9.10623694e-01]
    ]
)



# Add CPDs to the model
model.add_cpds(cpd_a0, cpd_s1_given_a0, cpd_a1_given_s1, cpd_s2_given_s1_a1, cpd_a2_given_s2, cpd_s3_given_s2_a2, cpd_o3_given_s3)

# Check the model for correctness
assert model.check_model()

# Perform inference
inference = VariableElimination(model)

# Query the network for all states and their posteriors given o3=0
query_a0 = inference.query(variables=['a0'], evidence={'o3': 0})
print(query_a0)
query_a1 = inference.query(variables=['a1'], evidence={'o3': 0})
print(query_a1)
query_a2 = inference.query(variables=['a2'], evidence={'o3': 0})
print(query_a2)
query_s1 = inference.query(variables=['s1'], evidence={'o3': 0})
print(query_s1)
query_s2 = inference.query(variables=['s2'], evidence={'o3': 0})
print(query_s2)
query_s3 = inference.query(variables=['s3'], evidence={'o3': 0})
print(query_s3)


